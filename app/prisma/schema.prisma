generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int        @id @default(autoincrement())
  status            Int        @default(1)
  name              String     @unique
  email             String?
  supplierId        Int?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdUserId     Int?
  updatedUserId     Int?
  deletedUserId     Int?
  devicesAsCustomer Device[]   @relation("CustomerAccount")
  devicesAsSupplier Device[]   @relation("SupplierAccount")
  locations         Location[]
  users             User[]
}

model User {
  id               Int       @id @default(autoincrement())
  status           Int       @default(1)
  name             String
  email            String    @unique
  password         String
  accountId        Int
  verificationCode String?   @db.VarChar(10)
  role             String?   @db.VarChar(25)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  createdUserId    Int?
  updatedUserId    Int?
  deletedUserId    Int?
  account          Account   @relation(fields: [accountId], references: [id])
}

model Category {
  id            Int        @id @default(autoincrement())
  code          String     @unique
  name          String     @unique
  parentId      Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdUserId Int?
  updatedUserId Int?
  deletedUserId Int?
  products      Product[]
  parent        Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryChildren")
}

model Product {
  id            Int       @id @default(autoincrement())
  status        Int       @default(1)
  code          String    @unique
  name          String    @unique
  categoryId    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdUserId Int?
  updatedUserId Int?
  deletedUserId Int?
  devices       Device[]
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: Restrict)
}

model Location {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int?
  accountId     Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdUserId Int?
  updatedUserId Int?
  deletedUserId Int?
  device        Device[]
  account       Account    @relation(fields: [accountId], references: [id])
  parent        Location?  @relation("LocationChildren", fields: [parentId], references: [id])
  children      Location[] @relation("LocationChildren")
}

model Device {
  id            Int             @id @default(autoincrement())
  status        Int             @default(1)
  code          String          @unique
  parentId      Int?
  productId     Int
  locationId    Int
  customerId    Int?
  supplierId    Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdUserId Int?
  updatedUserId Int?
  deletedUserId Int?
  name          String?
  signal        Int?
  battery       Int?
  lastActivity  DateTime?
  customer      Account?        @relation("CustomerAccount", fields: [customerId], references: [id])
  location      Location        @relation(fields: [locationId], references: [id])
  product       Product         @relation(fields: [productId], references: [id])
  supplier      Account?        @relation("SupplierAccount", fields: [supplierId], references: [id])
  deviceMessage DeviceMessage[]
}

model DeviceMessage {
  id            Int       @id @default(autoincrement())
  code          String
  message       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdUserId Int?
  updatedUserId Int?
  deletedUserId Int?
  device        Device    @relation(fields: [code], references: [code])
}
